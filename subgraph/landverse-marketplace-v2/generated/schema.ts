// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class Marketplace extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Marketplace entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Marketplace must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Marketplace", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Marketplace | null {
    return changetype<Marketplace | null>(
      store.get_in_block("Marketplace", id),
    );
  }

  static load(id: string): Marketplace | null {
    return changetype<Marketplace | null>(store.get("Marketplace", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get feePercentage(): BigInt {
    let value = this.get("feePercentage");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set feePercentage(value: BigInt) {
    this.set("feePercentage", Value.fromBigInt(value));
  }

  get fixedFee(): BigInt {
    let value = this.get("fixedFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set fixedFee(value: BigInt) {
    this.set("fixedFee", Value.fromBigInt(value));
  }

  get minimumTradePrice(): BigInt {
    let value = this.get("minimumTradePrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set minimumTradePrice(value: BigInt) {
    this.set("minimumTradePrice", Value.fromBigInt(value));
  }

  get paused(): boolean {
    let value = this.get("paused");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set paused(value: boolean) {
    this.set("paused", Value.fromBoolean(value));
  }
}

export class Transaction extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Transaction must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Transaction", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Transaction | null {
    return changetype<Transaction | null>(
      store.get_in_block("Transaction", id.toHexString()),
    );
  }

  static load(id: Bytes): Transaction | null {
    return changetype<Transaction | null>(
      store.get("Transaction", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get seller(): Bytes {
    let value = this.get("seller");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set seller(value: Bytes) {
    this.set("seller", Value.fromBytes(value));
  }

  get buyer(): Bytes {
    let value = this.get("buyer");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set buyer(value: Bytes) {
    this.set("buyer", Value.fromBytes(value));
  }

  get nftTo(): Bytes {
    let value = this.get("nftTo");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set nftTo(value: Bytes) {
    this.set("nftTo", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get price(): BigDecimal {
    let value = this.get("price");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set price(value: BigDecimal) {
    this.set("price", Value.fromBigDecimal(value));
  }

  get priceAfterFee(): BigDecimal {
    let value = this.get("priceAfterFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set priceAfterFee(value: BigDecimal) {
    this.set("priceAfterFee", Value.fromBigDecimal(value));
  }

  get tradingFeePercent(): BigDecimal {
    let value = this.get("tradingFeePercent");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set tradingFeePercent(value: BigDecimal) {
    this.set("tradingFeePercent", Value.fromBigDecimal(value));
  }

  get tradingFeeAmount(): BigDecimal {
    let value = this.get("tradingFeeAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set tradingFeeAmount(value: BigDecimal) {
    this.set("tradingFeeAmount", Value.fromBigDecimal(value));
  }

  get fixedFeeAmount(): BigDecimal {
    let value = this.get("fixedFeeAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set fixedFeeAmount(value: BigDecimal) {
    this.set("fixedFeeAmount", Value.fromBigDecimal(value));
  }

  get totalFee(): BigDecimal {
    let value = this.get("totalFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalFee(value: BigDecimal) {
    this.set("totalFee", Value.fromBigDecimal(value));
  }

  get isBuyLimit(): boolean {
    let value = this.get("isBuyLimit");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isBuyLimit(value: boolean) {
    this.set("isBuyLimit", Value.fromBoolean(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class TransactionHourData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TransactionHourData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TransactionHourData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TransactionHourData", id.toString(), this);
    }
  }

  static loadInBlock(id: string): TransactionHourData | null {
    return changetype<TransactionHourData | null>(
      store.get_in_block("TransactionHourData", id),
    );
  }

  static load(id: string): TransactionHourData | null {
    return changetype<TransactionHourData | null>(
      store.get("TransactionHourData", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get startUnixTime(): BigInt {
    let value = this.get("startUnixTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set startUnixTime(value: BigInt) {
    this.set("startUnixTime", Value.fromBigInt(value));
  }

  get totalAmount(): BigInt {
    let value = this.get("totalAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalAmount(value: BigInt) {
    this.set("totalAmount", Value.fromBigInt(value));
  }

  get totalPrice(): BigDecimal {
    let value = this.get("totalPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalPrice(value: BigDecimal) {
    this.set("totalPrice", Value.fromBigDecimal(value));
  }

  get totalPriceAfterFee(): BigDecimal {
    let value = this.get("totalPriceAfterFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalPriceAfterFee(value: BigDecimal) {
    this.set("totalPriceAfterFee", Value.fromBigDecimal(value));
  }

  get totalTradingFee(): BigDecimal {
    let value = this.get("totalTradingFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalTradingFee(value: BigDecimal) {
    this.set("totalTradingFee", Value.fromBigDecimal(value));
  }

  get totalFixedFee(): BigDecimal {
    let value = this.get("totalFixedFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalFixedFee(value: BigDecimal) {
    this.set("totalFixedFee", Value.fromBigDecimal(value));
  }

  get totalFee(): BigDecimal {
    let value = this.get("totalFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalFee(value: BigDecimal) {
    this.set("totalFee", Value.fromBigDecimal(value));
  }

  get totalTransaction(): BigInt {
    let value = this.get("totalTransaction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalTransaction(value: BigInt) {
    this.set("totalTransaction", Value.fromBigInt(value));
  }
}

export class TransactionDayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TransactionDayData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TransactionDayData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TransactionDayData", id.toString(), this);
    }
  }

  static loadInBlock(id: string): TransactionDayData | null {
    return changetype<TransactionDayData | null>(
      store.get_in_block("TransactionDayData", id),
    );
  }

  static load(id: string): TransactionDayData | null {
    return changetype<TransactionDayData | null>(
      store.get("TransactionDayData", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get startUnixTime(): BigInt {
    let value = this.get("startUnixTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set startUnixTime(value: BigInt) {
    this.set("startUnixTime", Value.fromBigInt(value));
  }

  get totalAmount(): BigInt {
    let value = this.get("totalAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalAmount(value: BigInt) {
    this.set("totalAmount", Value.fromBigInt(value));
  }

  get totalPrice(): BigDecimal {
    let value = this.get("totalPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalPrice(value: BigDecimal) {
    this.set("totalPrice", Value.fromBigDecimal(value));
  }

  get totalPriceAfterFee(): BigDecimal {
    let value = this.get("totalPriceAfterFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalPriceAfterFee(value: BigDecimal) {
    this.set("totalPriceAfterFee", Value.fromBigDecimal(value));
  }

  get totalTradingFee(): BigDecimal {
    let value = this.get("totalTradingFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalTradingFee(value: BigDecimal) {
    this.set("totalTradingFee", Value.fromBigDecimal(value));
  }

  get totalFixedFee(): BigDecimal {
    let value = this.get("totalFixedFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalFixedFee(value: BigDecimal) {
    this.set("totalFixedFee", Value.fromBigDecimal(value));
  }

  get totalFee(): BigDecimal {
    let value = this.get("totalFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalFee(value: BigDecimal) {
    this.set("totalFee", Value.fromBigDecimal(value));
  }

  get totalTransaction(): BigInt {
    let value = this.get("totalTransaction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalTransaction(value: BigInt) {
    this.set("totalTransaction", Value.fromBigInt(value));
  }
}

export class TransactionMonthData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TransactionMonthData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TransactionMonthData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TransactionMonthData", id.toString(), this);
    }
  }

  static loadInBlock(id: string): TransactionMonthData | null {
    return changetype<TransactionMonthData | null>(
      store.get_in_block("TransactionMonthData", id),
    );
  }

  static load(id: string): TransactionMonthData | null {
    return changetype<TransactionMonthData | null>(
      store.get("TransactionMonthData", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get startUnixTime(): BigInt {
    let value = this.get("startUnixTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set startUnixTime(value: BigInt) {
    this.set("startUnixTime", Value.fromBigInt(value));
  }

  get totalAmount(): BigInt {
    let value = this.get("totalAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalAmount(value: BigInt) {
    this.set("totalAmount", Value.fromBigInt(value));
  }

  get totalPrice(): BigDecimal {
    let value = this.get("totalPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalPrice(value: BigDecimal) {
    this.set("totalPrice", Value.fromBigDecimal(value));
  }

  get totalPriceAfterFee(): BigDecimal {
    let value = this.get("totalPriceAfterFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalPriceAfterFee(value: BigDecimal) {
    this.set("totalPriceAfterFee", Value.fromBigDecimal(value));
  }

  get totalTradingFee(): BigDecimal {
    let value = this.get("totalTradingFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalTradingFee(value: BigDecimal) {
    this.set("totalTradingFee", Value.fromBigDecimal(value));
  }

  get totalFixedFee(): BigDecimal {
    let value = this.get("totalFixedFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalFixedFee(value: BigDecimal) {
    this.set("totalFixedFee", Value.fromBigDecimal(value));
  }

  get totalFee(): BigDecimal {
    let value = this.get("totalFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalFee(value: BigDecimal) {
    this.set("totalFee", Value.fromBigDecimal(value));
  }

  get totalTransaction(): BigInt {
    let value = this.get("totalTransaction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalTransaction(value: BigInt) {
    this.set("totalTransaction", Value.fromBigInt(value));
  }
}
